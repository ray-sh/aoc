<!-- livebook:{"persist_outputs":true} -->

# aoc2031_13

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Section

```elixir
input = Kino.Input.textarea("input")
```

```elixir
input =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
```

<!-- livebook:{"output":true} -->

```
["23,123", "1116,117", "60,18", "954,323", "1235,226", "1123,599", "862,231", "808,11", "982,687",
 "574,248", "1041,449", "584,105", "408,575", "594,466", "1058,677", "23,33", "127,862", "1305,367",
 "87,220", "194,855", "706,455", "550,241", "750,493", "922,616", "88,861", "682,822", "487,359",
 "1208,555", "579,674", "1097,266", "1042,400", "1043,712", "567,151", "328,694", "494,47", "1,623",
 "716,779", "574,198", "599,890", "63,532", "818,728", "1148,239", "104,848", "1062,47", "1185,516",
 "428,849", "1134,519", "472,866", "1146,207", "785,541", ...]
```

```elixir
{points, rules} =
  Enum.reduce(input, {[], []}, fn x, {points, rules} ->
    if String.starts_with?(x, "fold") do
      "fold along " <> rule = x
      {points, [rule | rules]}
    else
      point =
        String.split(x, ",") |> Enum.map(fn v -> String.to_integer(v) end) |> List.to_tuple()

      {[point | points], rules}
    end
  end)
```

<!-- livebook:{"output":true} -->

```
{[
   {112, 7},
   {82, 633},
   {875, 726},
   {751, 245},
   {137, 59},
   {738, 750},
   {922, 652},
   {32, 180},
   {1242, 829},
   {908, 637},
   {989, 371},
   {724, 157},
   {107, 697},
   {218, 231},
   {1278, 180},
   {223, 485},
   {206, 887},
   {575, 562},
   {49, 852},
   {266, 115},
   {340, 582},
   {964, 197},
   {62, 528},
   {1250, 18},
   {1026, 743},
   {276, 455},
   {246, 80},
   {458, 331},
   {656, 241},
   {478, 183},
   {70, 302},
   {348, 106},
   {748, 800},
   {689, 408},
   {321, 527},
   {432, 56},
   {159, 484},
   {546, 215},
   {766, 179},
   {550, 512},
   {271, 773},
   {221, 66},
   {982, 872},
   {294, 180},
   {649, 123},
   {411, 590},
   {473, 271},
   {810, ...},
   {...},
   ...
 ],
 ["y=6", "y=13", "y=27", "x=40", "y=55", "x=81", "y=111", "x=163", "y=223", "x=327", "y=447",
  "x=655"]}
```

```elixir
defmodule Day13 do
  @display """
  <table>
    <tbody>
      <%= for row <- -20..25 do %>
        <tr>
          <%= for col <- -10..25 do %>
            <%=if {row,col} in table do %>
                <td style="color:red"> # </td>
              <%else%>
                <td> - </td>
            <%end%>
          <%end%>
        </tr>
      <%end%>
    </tbody>
  </table>
  """

  def table(board) do
    EEx.eval_string(@display, table: board)
    |> Kino.HTML.new()
  end

  def fold(points, "y=" <> p) do
    p = String.to_integer(p)

    (for {x, y} <- points, y > p do
       {x, 2 * p - y}
     end ++
       for {x, y} <- points, y < p do
         {x, y}
       end)
    |> Enum.uniq()
  end

  def fold(points, "x=" <> p) do
    p = String.to_integer(p)

    (for {x, y} <- points, x > p do
       {2 * p - x, y}
     end ++
       for {x, y} <- points, x < p do
         {x, y}
       end)
    |> Enum.uniq()
  end

  def result(points, rules) when is_list(rules) do
    Enum.reduce(rules, points, fn rule, points ->
      fold(points, rule)
    end)
  end

  def mirro(points, m) do
    for {x, y} <- points do
      {2 * m - x, y}
    end
  end
end

rules = Enum.reverse(rules)
Day13.fold(points, hd(rules)) |> length()

Day13.result(points, rules)
|> Day13.mirro(10)
|> Day13.table()
```
