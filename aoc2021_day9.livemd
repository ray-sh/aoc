<!-- livebook:{"persist_outputs":true} -->

# aoc2021_day9

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Section



```elixir
input = Kino.Input.textarea("input")
```

```elixir
input_str = Kino.Input.read(input)

input =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(&String.to_charlist(&1))
```

<!-- livebook:{"output":true} -->

```
['9234598321279999876543212397634598789843210123456789212999878987556456999878965432459101987654567899',
 '8965987432367898989864301986545789698765421939697894349876967896432349899769896543598929898763478998',
 '7896796543458997698765212987676994569865439898989965498765456987321099789858789654987898789854567987',
 '6789899654569987549876943498787893498979698787678976789886349876532988656645699769876745699965679896',
 '5678998965878976534989894999898932987898987656567898999943234987849876543234678998765434788978798765',
 '4556987896989765423498789899989899876567986745456789898932145798769987653123789987654323487899899954',
 '3249976987899654312987677789976798765456985432345689767991015679878996544012999899873212376789939853',
 '4398765898998995499876585678965459854369876541237895456789324589989988432167898798765901234998749754',
 '5469876789987989989965434567894398765498765430125789345695435678999876543456789679989892945897659886',
 '6798987899876875679954321236789199876599876321234599216789576789656987664667894589998789896789769987',
 '7987698998765654568899410145699989987987976532345678924597689996545698875798923678997656789899898798',
 '9878549976543123456798921234987978999876986543467899435789799985324569989999434569976545689999997659',
 '9963234898794012767987892349876867998765499876578929876789898765435678990196545698987438795498986543',
 '9852123789989123459876789498765657898654345987689210989892999876549889991987656997696545894387897651',
 '8743245678978954598975345998654545789654234599789329999901997987669998989998779886598767895256789872',
 '7654346789567895987654249889843437678965123489895498999899886598798997678999898775459898952145699993',
 '8765657893458976798765398776762123489987434567976987898789765439987876587999987654345999943234988989',
 '9878767892599987899876987654321012591296545779989986789678954329876545456789876565234689895949877565',
 '6989878901989898965987898765434323690987856889798765454599769212985434345699965432123456789899765454',
 '5496989329878799654398969876567434589998967897659854343489898909874323234579876551012348997798974343',
 '1345695498767678967989656987698997678969878998798765212378987898765210123567965432123459976656793212',
 '0123987987654569979876545698789989789654989999897654324567896569984321234878998643234567895436789393',
 '9294599876543456895987656789899879998793297899989775435978935498765432345679879784345678976545899989',
 '8989678998765567984398768891998767899989356998978976567899321239886545456789769895456789987656789878',
 '7879989889878678965679879932998658999979459897869987678989990347998676768896653939869893499767898769',
 '6567897679989789976789989899876549679868998786458898789879889456789789879965432123978932349878987656',
 '3458987567899897899895496798765434569659987655377789898767678968999997989987543234989321298989996543',
 '4567893468998956568901345987654325698789876544265678987956567899019876596898655455696539987899987632',
 '5678912345987545456912346998765412389896987432103459876545458942198765445798796578789998976989998321',
 '6789101256996433347893459899898701278965496545212398765432369893239893234789987678999877965578999210',
 '9893212369874321236789569789987632369896397876343459854321236789945984345696598789398765624466799321',
 '9954323498765438345699998679876543456789298997456769968534345699896976789789459899299544312345678943',
 '8765434789876567456789877545987854667892129976567878987678456789789899899892398978987632101234589654',
 '9876545678987876569899965432398965878921012987678989898989567898679789921999987667898543612345678969',
 '0988656789398987878998998321239878989432123698889998769499878977545678930198765456987659543456789878',
 '1998767895459298989787987532456989996569234569999989654323989765434567921239874366798768767568999989',
 '9879878987679109899656796543456799987898945678989978963212399874325656893498765234769979878679589995',
 '8765989898998998768943987654697989998987896989878867942103456965412346789999979123458989988789678954',
 '9654396789987987656792198967989978999896789898768756893214579876525457899889898938767996899898789543',
 '8964245699876796545789999879878767998765458799657646789925689987436567988776767899878924456989899952',
 '7893126988765987636799899998767656987654323678943434567899798998547679876565457789989313345678999891',
 '6789019876854398747898789987654345698766434567932123456798987898798798765432345699993201234789998789',
 '5698929865464239658975678998743234769876556778943254567987786799899899895601246899874312345899987678',
 '4567897654321099899464568987645123456998667889765345678996695689932999954312356789965423656899876567',
 '3456798976542987954353459876532012368909788998765456989985434599321098765424456899976534569998765456',
 '2169989897953496543242365987432143499219899899878567899876745678934989989535767899876545698999764345',
 '3298676789894569732101234599843254789398965674989698943987658789549876596546878999987676987899853234',
 '4987545698789698654232345798754365678987894353499999432398767897698785459657989789998799876598767346',
 '5988436789698789765343456799765496889876789212989894341239878998987654398768997696999899987439878457',
 '9876521234589899876457667987989987898765678909978799210949999459896543239878978545789998996521989568',
 ...]
```

```elixir
defmodule Day9 do
  use Kino.JS

  @heigh length(input) |> IO.inspect()
  @width length(hd(input)) |> IO.inspect()
  @input input

  asset "main.js" do
    """
    export function init(ctx, html) {
      ctx.root.innerHTML = html;
    }
    """
  end

  @table """
    <table>
      <tbody>
        <%= for row <- table do%>
          <tr>
            <%= for {v, cor} <- row do %>
              <%=if cor in basin do %>
                <td style="color:red"> <%= v %> </td>
              <%else%>
                <td> <%= v %> </td>
              <%end%>
            <% end %>
          </tr>
        <%end%>
      </tbody>
    </table>
  """

  def list_to_table(table, basin) do
    html = EEx.eval_string(@table, table: table, basin: basin)
    Kino.JS.new(__MODULE__, html)
  end

  def get_x_y(index, len) do
    # This will be called much times, maybe we should build the grid 
    # from start to save the time
    {div(index, len), Integer.mod(index, len)}
  end

  def neighbour(x, y) do
    for {x, y} <- [{x - 1, y}, {x + 1, y}, {x, y - 1}, {x, y + 1}],
        x in 0..(@heigh - 1),
        y in 0..(@width - 1) do
      {(Enum.at(@input, x) |> Enum.at(y)) - ?0, {x, y}}
    end
  end

  def board(input) do
    # %{{x,y} => v} struct maybe more efficiency
    List.flatten(input)
    |> Enum.with_index(fn e, index ->
      {e - 48, get_x_y(index, @width)}
    end)
  end

  def part1() do
    for {e, {x, y}} <- Day9.board(@input) do
      {e, Day9.neighbour(x, y)}
    end
    |> Enum.reduce(0, fn {e, nb}, acc ->
      if e < Enum.min(Enum.map(nb, &elem(&1, 0))), do: e + 1 + acc, else: acc
    end)
  end

  def part2() do
    for {e, {x, y}} <- Day9.board(@input) do
      {{e, {x, y}}, Day9.neighbour(x, y)}
    end
    |> Enum.filter(fn {{e, _}, nb} ->
      e < Enum.min(Enum.map(nb, &elem(&1, 0)))
    end)

    # find all low points and neigbors
    # got low points
    |> Enum.map(&elem(&1, 0))
    |> Enum.map(fn low_point ->
      Day9.basin(low_point)
      |> Enum.uniq()
      |> length()
    end)
    |> Enum.sort(:desc)
    |> Enum.take(3)
    |> Enum.product()
  end

  def basin({v, {x, y}} = low_point) do
    up_ones =
      neighbour(x, y)
      # find upstream except 9
      |> Enum.filter(&(elem(&1, 0) != 9 and elem(&1, 0) >= v + 1))

    [low_point | Enum.flat_map(up_ones, &basin/1)]
  end
end

Day9.part1()
Day9.part2()
```

<!-- livebook:{"output":true} -->

```
100
100
```

<!-- livebook:{"output":true} -->

```
1327014
```
